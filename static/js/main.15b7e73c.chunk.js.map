{"version":3,"sources":["img/pandmonium.png","components/logo/index.jsx","App.js","components/titles/text/text.jsx","components/titles/icon/tittleIcon.jsx","components/titles/index.jsx","components/Buttons/buttons.jsx","components/sidebarSettings/index.jsx","components/modal/index.jsx","views/settings.jsx","serviceWorker.js","firebase/index.js","index.js"],"names":["module","exports","Logo","src","logo","alt","className","React","Component","Home","firebase","console","log","to","TittleText","text","TittleIcon","iconLink","Tittle","color","icon","style","backgroundColor","Button","type","value","Sidebar","Modal","open","close","classes","onClick","TextField","id","label","textField","autoComplete","margin","variant","button","Settings","state","modalOpen","closeModal","bind","this","setState","Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseApp","initializeApp","auth","onAuthStateChanged","user","createFirebaseApp","ReactDOM","render","exact","path","props","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,wC,8TCgB5BC,G,uLATT,OACE,gCACI,yBAAKC,IAAKC,IAAMC,IAAI,eAAeC,UAAU,yB,GAJtCC,IAAMC,YC2BVC,MA3Bf,YAEE,OAFwB,EAAXC,SACbC,QAAQC,IAAI,qBAEV,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,6BACE,kBAAC,IAAD,CAAMO,GAAG,iBAAiBP,UAAU,uBACpC,uBAAGA,UAAU,wBAAb,gBADA,iBAIA,kBAAC,IAAD,CAAMO,GAAG,iBAAiBP,UAAU,wBACpC,uBAAGA,UAAU,wBAAb,yBADA,oBAIA,kBAAC,IAAD,CAAMO,GAAG,YAAYP,UAAU,wBAC/B,uBAAGA,UAAU,wBAAb,cADA,YAGA,kBAAC,IAAD,CAAMO,GAAG,cAAcP,UAAU,yBAC/B,uBAAGA,UAAU,wBAAb,cADF,iB,QCbOQ,G,MANI,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACjB,OACI,wBAAIT,UAAU,cAAcS,KCMrBC,EARI,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACjB,OACI,gCACKA,ICQEC,EATA,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOJ,EAAgB,EAAhBA,KAAMK,EAAU,EAAVA,KAC1B,OACI,4BAAQC,MAAO,CAACC,gBAAgBH,GAAOb,UAAU,UAC7C,kBAAC,EAAD,CAAYW,SAAUG,EAAMd,UAAU,SACtC,kBAAC,EAAD,CAAYS,KAAMA,MCAfQ,G,MANA,SAAC,GAAY,IAAXR,EAAU,EAAVA,KACb,OACI,2BAAOS,KAAK,SAASC,MAAOV,EAAMT,UAAU,aCUrCoB,G,MAXC,WACZ,OACI,2BAAOpB,UAAU,mBACb,kBAAC,EAAD,CAAQS,KAAK,aACb,kBAAC,EAAD,CAAQA,KAAK,YACb,kBAAC,EAAD,CAAQA,KAAK,gBACb,kBAAC,EAAD,CAAQA,KAAK,mB,0BCiBVY,MArBf,YAAiC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACfC,EAAO,kBAAcF,EAAO,OAAS,UAC3C,OACE,yBAAKtB,UAAWwB,GACd,yBAAKxB,UAAU,SACb,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAAMO,GAAG,KACP,2BAAOW,KAAK,SAASlB,UAAU,qBAAqBmB,MAAM,IAAIM,QAASF,KAEzE,iDAEF,yBAAKvB,UAAU,eACb,kBAAC0B,EAAA,EAAD,CAAWC,GAAG,0BAA0BC,MAAM,gBAAa5B,UAAWwB,EAAQK,UAAWX,KAAK,WAAWY,aAAa,mBAAmBC,OAAO,SAASC,QAAQ,aACjK,kBAAC,IAAD,CAAQA,QAAQ,YAAYhC,UAAS,UAAKwB,EAAQS,OAAb,iBAAoCR,QAASF,GAAlF,cCYKW,E,YAzBX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CAAEC,WAAW,GAC1B,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAHR,E,0EAOVjC,QAAQC,IAAI,UACZiC,KAAKC,SAAS,CAACJ,WAAW,M,+BAGpB,IACCA,EAAaG,KAAKJ,MAAlBC,UACP,OACI,kBAAC,WAAD,KACI,kBAAC,EAAD,CAAOd,KAAMc,EAAWb,MAAOgB,KAAKF,aACpC,8BACI,kBAAC,EAAD,CAAQxB,MAAQ,UAAWJ,KAAO,mBAAgBK,KAAQ,uBAAGd,UAAU,uBAAb,2BAC1D,kBAAC,EAAD,CAASA,UAAU,kB,GAnBhBC,IAAMC,WCOTuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6BCfAC,G,MAAS,CACXC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,8CCFLC,EDKoB,WAUtB,OATAA,IAAYC,cAAcT,GAC1BQ,IAAYE,OAAOC,oBAAmB,SAAAC,GAC9BA,EACArD,QAAQC,IAAI,kBAGZD,QAAQC,IAAI,wBAGbgD,ICfSK,GACpBC,IAASC,OACT,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIF,OAAQ,SAAAG,GAAK,OAAI,kBAAC,EAAD,CAAM5D,SAAUkD,OACvD,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,iBAAiBF,OAAQ,SAAAG,GAAK,OAAI,kBAAC,EAAD,WAEjDC,SAASC,eAAe,SAEnC7D,QAAQC,IAAI,uCFgHN,kBAAmB6D,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.15b7e73c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pandmonium.399501f0.png\";","import React from 'react';\nimport logo from '../../img/pandmonium.png';\nimport './style.css';\n\n//Creating logo component\nclass Logo extends React.Component{\n    render(){\n      return (\n        <figure>\n            <img src={logo} alt=\"Pan D Monium\" className=\"logo-PandMonium\"/>\n        </figure>\n          )  \n    }\n};\n\n\nexport default Logo;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './App.css';\nimport Logo from './components/logo/index';\n\nfunction Home({firebase}) {\n  console.log('Se despliega home')\n  return (\n    <div className=\"App\">\n      <Logo/>\n      <nav>\n        <Link to=\"/corte-de-caja\" className=\"homeButtons cashOut\">\n        <i className=\"material-icons icons\">attach_money</i>\n          Corte de Caja\n        </Link>\n        <Link to=\"/configuracion\" className=\"homeButtons settings\">\n        <i className=\"material-icons icons\">settings_applications</i>\n          Configuración\n        </Link>\n        <Link to=\"/comandas\" className=\"homeButtons commands\">\n        <i className=\"material-icons icons\">restaurant</i>\n          Comandas</Link>\n        <Link to=\"/Inventario\" className=\"homeButtons inventory\">\n          <i className=\"material-icons icons\">assignment</i>\n          Inventario\n        </Link>\n      </nav>\n    </div>\n  );\n}\n\n\nexport default Home;\n\n","import React from 'react';\nimport '../style.css';\n\nconst TittleText = ({text}) => {\n    return (\n        <h2 className=\"tittleText\">{text}</h2>\n    )\n}\n\nexport default TittleText","import React from 'react';\nimport  '../style.css';\n\nconst TittleIcon = ({iconLink}) => {\n    return(\n        <figure>\n            {iconLink}\n        </figure>\n    )\n}\n\nexport default TittleIcon;","import React from 'react';\nimport './style.css';\nimport TittleText from './text/text'\nimport TittleIcon from './icon/tittleIcon'\n\nconst Tittle = ({color, text, icon}) => {\n    return (\n        <header style={{backgroundColor:color}}className=\"header\">\n            <TittleIcon iconLink={icon} className=\"icon\"/>\n            <TittleText text={text}/>\n        </header>\n    )\n}\n\nexport default Tittle;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Button = ({text}) => {\r\n    return(\r\n        <input type=\"button\" value={text} className=\"button\"/>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react'\r\nimport Button from '../Buttons/buttons';\r\nimport './style.css'\r\n\r\nconst Sidebar = () => {\r\n    return(\r\n        <aside className=\"sidebarSettings\">\r\n            <Button text=\"Usuarios\"/>\r\n            <Button text=\"Menú\"/>\r\n            <Button text=\"Proveedores\"/>\r\n            <Button text=\"Cambiar PIN\"/>\r\n        </aside>\r\n    )\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\nimport \"./style.css\";\nimport { Link } from \"react-router-dom\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nfunction Modal({ open, close }) {\n  const classes = `overlay ${open ? \"open\" : \"closed\"}`\n  return (\n    <div className={classes}>\n      <div className=\"modal\">\n        <div className=\"modal-title\">\n          <Link to=\"/\">\n            <input type=\"button\" className=\"close-modal-button\" value=\"X\" onClick={close} />\n          </Link>\n          <h3>Introduce tu PIN</h3>\n        </div>\n        <div className=\"modal-input\">\n          <TextField id=\"outlined-password-input\" label=\"Contraseña\" className={classes.textField} type=\"password\" autoComplete=\"current-password\" margin=\"normal\" variant=\"outlined\" />\n          <Button variant=\"contained\" className={`${classes.button} button-modal`} onClick={close}>Entrar</Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nexport default Modal","import React, {Fragment} from 'react';\nimport Tittle from '../components/titles/index';\nimport Sidebar from '../components/sidebarSettings/index';\nimport Modal from \"../components/modal\"\n\nclass Settings extends React.Component {\n    constructor() {\n        super();\n        this.state = { modalOpen: true }\n        this.closeModal = this.closeModal.bind(this)\n    }\n\n    closeModal() {\n        console.log(\"Closes\")\n        this.setState({modalOpen: false})\n    }\n\n    render() {\n        const {modalOpen} = this.state\n        return (\n            <Fragment>\n                <Modal open={modalOpen} close={this.closeModal}/>\n                <main>\n                    <Tittle color = \"#303F9F\"  text = \"Configuración\" icon = {<i className=\"material-icons icon\">settings_applications</i>}/>\n                    <Sidebar className=\"sidebar\"/>\n                </main>\n            </Fragment>\n        )\n    }\n}\n\nexport default Settings;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import firebaseApp from 'firebase/app'\r\nimport 'firebase/auth'\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyC7FSK03JcEV7HtO20cXB03ncK_afcfSc4\",\r\n    authDomain: \"pandemonium-5a001.firebaseapp.com\",\r\n    databaseURL: \"https://pandemonium-5a001.firebaseio.com\",\r\n    projectId: \"pandemonium\",\r\n    storageBucket: \"pandemonium.appspot.com\",\r\n    messagingSenderId: \"472468721699\",\r\n    appId: \"1:472468721699:web:6c8dfa1b1e77d01f296196\"\r\n}\r\n\r\nconst createFirebaseApp = () => {\r\n    firebaseApp.initializeApp(config)\r\n    firebaseApp.auth().onAuthStateChanged(user => {\r\n        if (user) {\r\n            console.log('User connected')\r\n\r\n        } else {\r\n            console.log('No user connected')\r\n        }\r\n    })\r\n    return firebaseApp\r\n}\r\n\r\n\r\nexport default createFirebaseApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './App';\nimport Settings from './views/settings'\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport createFirebaseApp from './firebase'\nconst firebaseApp = createFirebaseApp() \nReactDOM.render(\n<Router>\n    <Switch>\n        <Route exact path=\"/\" render={props => <Home firebase={firebaseApp}/>}></Route>\n        <Route exact path=\"/configuracion\" render={props => <Settings/>}></Route>\n    </Switch>\n</Router>, document.getElementById('root'));\n\nconsole.log('Este es el index donde esta la ruta')\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}